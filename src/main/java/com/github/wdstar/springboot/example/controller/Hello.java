package com.github.wdstar.springboot.example.controller;

import java.util.HashMap;
import java.util.Map;

import com.github.wdstar.springboot.example.domain.RestClient;
import com.github.wdstar.springboot.example.domain.Retry;
import com.github.wdstar.springboot.example.domain.SecretProps;

import org.checkerframework.checker.nullness.qual.Nullable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.info.BuildProperties;
import org.springframework.cloud.client.circuitbreaker.CircuitBreakerFactory;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import lombok.extern.slf4j.Slf4j;

@RestController
@Slf4j
public class Hello {

	// Unrecommended: field injectioin.
	@Autowired
	@Nullable
	private BuildProperties buildProperties;

	private final CircuitBreakerFactory circuitBreakerFactory;

	private final RestClient restClient;

	private final Retry retry;

	private final SecretProps secrets;

	// Recommended: constructor injection.
	@Autowired
	public Hello(final CircuitBreakerFactory circuitBreakerFactory, final RestClient restClient, final Retry retry,
			final SecretProps secrets) {
		this.circuitBreakerFactory = circuitBreakerFactory;
		this.restClient = restClient;
		this.retry = retry;
		this.secrets = secrets;
		if (this.secrets == null) {
			logger.error("secrets field is null!");
		}
	}

	@RequestMapping("/circuitBreaker")
	public Map circuitBreaker() {
		return circuitBreakerFactory.create("targetMethod").run(restClient.targetMethodSuppplier(), t -> {
			logger.warn("restClient::targetMethod() call failed", t);
			final Map<String, String> fallback = new HashMap<>();
			fallback.put("hello", "circuit breaker fallback");
			return fallback;
		});
	}

	@RequestMapping("/greet")
	public String greet() {
		// This log object is generated by the `@Slf4j` annotation.
		logger.info("Hello.greet() called.");

		return "Hello World!";
	}

	@RequestMapping("/retry")
	public String retry() {
		try {
			retry.targetMethod();
		}
		catch (final Exception e) {
			return "error: " + e.getMessage();
		}

		return "success.";
	}

	@RequestMapping("/version")
	public String version() {
		logger.info("Hello.version() called.");
		String version = "Not Found.";
		if (buildProperties != null) {
			version = buildProperties.getVersion();
		}

		return version;
	}

}
