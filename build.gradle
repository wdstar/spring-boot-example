buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.25')
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
    id 'jacoco'
    id 'io.freefair.lombok' version '5.1.1'
    id 'org.ajoberstar.grgit' version '4.1.0'
    id 'org.checkerframework' version '0.5.10'
    id 'org.sonarqube' version '3.0'
}

apply plugin: 'io.spring.javaformat'

group 'com.github.wdstar'
sourceCompatibility = javaVersion
targetCompatibility = javaVersion

ext.vers = [
    'springCloud': 'Hoxton.SR8',
    'groovy': '3.0.6',
]

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${vers.springCloud}"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard'
    implementation 'org.springframework.retry:spring-retry'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    // https://mvnrepository.com/artifact/org.codehaus.groovy/groovy-all
    // for loading a `logback.groovy` file.
    runtime "org.codehaus.groovy:groovy:${vers.groovy}"
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

version = {
    def tags = grgit.tag.list().collect { it.getName() }
    def versionStr
    if (tags.any { it ==~ /v\d.*/ }) {
        versionStr = grgit.describe(longDescr: false, tags: true, match: ['v[0-9]*'])
    } else {
        versionStr = grgit.head().abbreviatedId
    }
    return versionStr.replaceFirst(/^v/, '') + (grgit.status().isClean() ? '' : '+dirty')
}()

task showVersion {
    doLast {
        println version
    }
}

checkerFramework {
    excludeTests = true
    checkers = [
        'org.checkerframework.checker.nullness.NullnessChecker',
    ]
}

// See: https://docs.freefair.io/gradle-plugins/4.1.1/reference/#_io_freefair_lombok
lombok {
    config['lombok.log.fieldName'] = 'logger'
}

springBoot {
    buildInfo()
}

test {
    // for JaCoCo with JUnit5
    useJUnitPlatform()
    testLogging {
        events 'passed', 'failed', 'skipped'
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        html.enabled true
    }
}

project.tasks['sonarqube'].dependsOn 'jacocoTestReport'
sonarqube {
    properties {
        property 'sonar.projectKey', 'wdstar_spring-boot-example'
        property 'sonar.organization', 'wdstar'
        property 'sonar.host.url', 'https://sonarcloud.io'
    }
}
